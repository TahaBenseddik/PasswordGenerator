<# 
.DESCRIPTION 
 Generate a random password with the option to convert the output to a secure string.
 The password is generated by using the .NET class System.Security.Cryptography.RNGCryptoServiceProvider
 This class Implements a cryptographic Random Number Generator

.EXAMPLE
 Get-RandomPassword -PasswordLength 16 -SecureString

.EXAMPLE
 Get-RandomPassword -PasswordLength 12

.PARAMETER PasswordLength
 Integer parameter to make up the length of the password

.PARAMETER SecureString
 Switch paramater to output the password as a secure string

.OUTPUTS
 System.String or System.Security.SecureString
#> 

Function Get-RandomPassword {

    [CmdletBinding()]
    Param
    (
        # Specifies minimum password length
        [Parameter(Mandatory=$false)]
        [ValidateScript({$_ -gt 0})] 
        [int]$PasswordLength = 8,
        
        [Parameter(Mandatory=$false)] 
        [Switch]$SecureString
    )

    #defining the ASCII range of characters to be used https://www.ascii-code.com/ 
    [uint32]$min= 48
    [uint32]$max= 122

    [string]$SecPassword = ''

    while($SecPassword.Length -lt $PasswordLength){

        #generate random ASCII character with the help of the RNGCryptoServiceProvider Class
        $diff=$max-$min+1
        [Byte[]] $bytes = 1..4
        $rng = New-Object System.Security.Cryptography.RNGCryptoServiceProvider
        #generate the number
        $rng.getbytes($bytes)
        $number = [System.BitConverter]::ToUInt32(($bytes),0)
        $number = $number % $diff + $min
        $number = [char]$number 

        $SecPassword += $number.tostring()
    }
    
    if($SecureString){
        
        # Convert password to [securestring] to prohibit any accidental output.     
        return (ConvertTo-SecureString $SecPassword -AsPlainText -Force)    
    }
    else{

        return $SecPassword
    }
}

export-modulemember -function Get-RandomPassword